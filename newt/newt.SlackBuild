#!/bin/bash
# $Id: newt.SlackBuild,v 1.4 2008/05/18 14:31:30 root Exp root $
# Copyright (c) 2005,2008 Eric Hameleers <alien@slackware.com>
# Modified by Papa Issa DIAKHATE (paissad) <paissad@gmail.com>
# All rights reserved.
#
#   Permission to use, copy, modify, and distribute this software for
#   any purpose with or without fee is hereby granted, provided that
#   the above copyright notice and this permission notice appear in all
#   copies.
#
#   THIS SOFTWARE IS PROVIDED ``AS IS'' AND ANY EXPRESSED OR IMPLIED
#   WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF
#   MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
#   IN NO EVENT SHALL THE AUTHORS AND COPYRIGHT HOLDERS AND THEIR
#   CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,
#   SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT
#   LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF
#   USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
#   ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
#   OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT
#   OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF
#   SUCH DAMAGE.
# -----------------------------------------------------------------------------
#
# Slackware SlackBuild script 
# ===========================
# By:         Eric Hameleers <alien@slackware.com>
# For:        newt
# Descr:      semi-graphical interface development kit
# URL:        http://partimage.org/
# Needs:      
# Changelog:  
# 0.51.6-1:  07/Aug/2005 by Eric Hameleers <alien@sox.homeip.net>
#            * Initial build.
#              Newt provides a Python module. This module is built for my
#              current version of Python (you might need to recompile newt).
# 0.52.2-1:    26/Jan/2008 by Eric Hameleers <alien@slackware.com>
#             * Update. The sources are no longer downloadable from
#               partimage.org so we get them from debian.org
# 
# Run 'sh newt.SlackBuild --cleanup' to build a Slackware package.
# The package (.tgz) plus descriptive .txt file are created in /tmp .
# Install using 'installpkg'. 
#
# -----------------------------------------------------------------------------

# Set initial variables:

PRGNAM=newt
VERSION=${VERSION:-0.52.2}
ARCH=${ARCH:-$(uname -m)}
BUILD=${BUILD:-1}
TAG=${TAG:-_paissad}

DOCS="CHANGES COPYING"

# Newt does not detect the correct python version:
PYTHON=$(python -V 2>&1 | cut -f 2 -d' ' | cut -f 1-2 -d.)

# Where do we look for sources?
SRCDIR=$(cd $(dirname $0); pwd)

# Place to build (TMP) package (PKG) and output (OUTPUT) the program:
TMP=${TMP:-/tmp/build}
PKG=$TMP/package-$PRGNAM
OUTPUT=${OUTPUT:-/tmp}

# Input URL: http://ftp.debian.org/debian/pool/main/n/newt/newt_0.52.2.orig.tar.gz
SOURCE="$SRCDIR/${PRGNAM}_${VERSION}.orig.tar.gz"
SRCURL="http://ftp.debian.org/debian/pool/main/n/${PRGNAM}/${PRGNAM}_${VERSION}.orig.tar.gz"

##
## --- with a little luck, you won't have to edit below this point --- ##
##

# Exit the script on errors:
set -e
trap 'echo "$0 FAILED at line ${LINENO}" | tee $OUTPUT/error-${PRGNAM}.log' ERR
# Catch unitialized variables:
set -u
P1=${1:-1}

# Slackware 11 and up need other option (gcc > 3.3.x)
if [ $(gcc -dumpversion | tr -d  '.' |cut -c 1-2) -gt 33 ]; then
  MOPT=tune
else
  MOPT=cpu
fi

# Create working directories:
mkdir -p $OUTPUT          # place for the package to be saved
mkdir -p $TMP/tmp-$PRGNAM # location to build the source
mkdir -p $PKG             # place for the package to be built
rm -rf $PKG/*             # always erase old package's contents
rm -rf $TMP/tmp-$PRGNAM/* # remove the remnants of previous build

# Source file availability:
if ! [ -f ${SOURCE} ]; then
  if ! [ "x${SRCURL}" == "x" ]; then
    # Check if the $SRCDIR is writable at all - if not, download to $OUTPUT
    [ -w "$SRCDIR" ] || SOURCE="$OUTPUT/$(basename $SOURCE)"
    echo "Source '$(basename ${SOURCE})' not available yet..."
    echo "Will download file to $(dirname $SOURCE)"
    wget -nv -T 20 -O "${SOURCE}" "${SRCURL}" || true
    if [ $? -ne 0 -o ! -s "${SOURCE}" ]; then
      echo "Downloading '$(basename ${SOURCE})' failed... aborting the build."
      mv -f "${SOURCE}" "${SOURCE}".FAIL
      exit 1
    fi
  else
    echo "File '$(basename ${SOURCE})' not available... aborting the build."
    exit 1
  fi
fi

if [ "$P1" == "--download" ]; then
  echo "Download complete."
  exit 0
fi

# --- PACKAGE BUILDING ---

echo "++"
echo "|| $PRGNAM-$VERSION"
echo "++"

cd $TMP/tmp-$PRGNAM
echo "Extracting the source archive(s) for $PRGNAM..."
if $(file ${SOURCE} | grep -q ": bzip2"); then
  tar -xjvf ${SOURCE}
elif $(file ${SOURCE} | grep -q ": gzip"); then
  tar -xzvf ${SOURCE}
fi
mv ${PRGNAM}-${VERSION}/${PRGNAM}-${VERSION}.tar.gz .
rm -r ${PRGNAM}-${VERSION}
tar -zxvf ${PRGNAM}-${VERSION}.tar.gz
cd ${PRGNAM}-${VERSION}
# A lot of patches are floating around - everyone uses them:
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-colors.patch -b -z .colors \
  2>&1 | tee  $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-scrollbars.patch -b -z .scrollbars \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-pgupdown-crash.patch -b -z .crash \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-screensize.patch -b -z .screensize \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-cbtpos.patch -b -z .cbtpos \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-focus.patch -b -z .focus \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-cursor.patch -b -z .cursor \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-pyexample.patch -b -z .pyex \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-dwchar.patch -b -z .dwchar \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-notcl.patch -b -z .notcl \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
patch -p1 < $SRCDIR/${PRGNAM}-${VERSION}-nostatic.patch -b -z .nostatic \
  2>&1 | tee -a $OUTPUT/patch-${PRGNAM}.log
chown -R root:root .
chmod -R u+w,go+r-w,a-s .

case "$ARCH" in
  i486)      SLKCFLAGS="-O2 -march=i486 -m${MOPT}=i686"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  s390)      SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  powerpc)   SLKCFLAGS="-O2"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
  x86_64)    SLKCFLAGS="-O2 -fPIC"
             SLKLDFLAGS="-L/usr/lib64"; LIBDIRSUFFIX="64"
			 sed -i "s,^libdir =.*lib,&64," Makefile.in
             ;;
  athlon-xp) SLKCFLAGS="-march=athlon-xp -O3 -pipe -fomit-frame-pointer"
             SLKLDFLAGS=""; LIBDIRSUFFIX=""
             ;;
esac

echo Building ...
LDFLAGS="$SLKLDFLAGS" \
CXXFLAGS="$SLKCFLAGS" \
CFLAGS="$SLKCFLAGS" \
./configure --prefix=/usr \
            --libdir=/usr/lib${LIBDIRSUFFIX} \
            --localstatedir=/var \
            --sysconfdir=/etc \
            --with-gpm-support=no \
            --program-prefix="" \
            --program-suffix="" \
            2>&1 | tee $OUTPUT/configure-${PRGNAM}.log
make PYTHONVERS="python${PYTHON}"  2>&1 | tee $OUTPUT/make-${PRGNAM}.log

# Install all the needed stuff to the package dir
# Use installwatch if available, to produce a logfile of the installation
# process that is more easily readable:
if $(which installwatch > /dev/null 2>&1); then
  installwatch -o $OUTPUT/install-${PRGNAM}.log \
    make PYTHONVERS="python${PYTHON}" instroot=$PKG install
else
  make PYTHONVERS="python${PYTHON}" instroot=$PKG install \
    2>&1 |tee $OUTPUT/install-${PRGNAM}.log
fi

# Add documentation:
mkdir -p $PKG/usr/doc/$PRGNAM-$VERSION
cp -a $DOCS $PKG/usr/doc/$PRGNAM-$VERSION || true
cp -a $SRCDIR/$(basename $0) $PKG/usr/doc/$PRGNAM-$VERSION/$PRGNAM.SlackBuild
find $PKG/usr/doc -type f -exec chmod 644 {} \;

# Compress the man page(s):
if [ -d $PKG/usr/man ]; then
  find $PKG/usr/man -type f -name "*.?" -exec gzip -9f {} \;
  for i in $(find $PKG/usr/man -type l -name "*.?") ; do ln -s $( readlink $i ).gz $i.gz ; rm $i ; done
fi

# Strip binaries:
cd $PKG
find . | xargs file | grep "executable" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
find . | xargs file | grep "shared object" | grep ELF | cut -f 1 -d : | xargs strip --strip-unneeded 2> /dev/null || true
cd -

# Add a package description:
mkdir -p $PKG/install
cat $SRCDIR/slack-desc > $PKG/install/slack-desc
if [ -f $SRCDIR/doinst.sh ]; then
  cat $SRCDIR/doinst.sh >> $PKG/install/doinst.sh
fi

# Build the package:
cd $PKG
/sbin/makepkg --linkadd y --chown n $OUTPUT/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz 2>&1 | tee $OUTPUT/makepkg-${PRGNAM}.log
cd $OUTPUT
md5sum ${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz > ${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.tgz.md5
#cd -
#cat $PKG/install/slack-desc | grep "^${PRGNAM}" > $OUTPUT/${PRGNAM}-${VERSION}-${ARCH}-${BUILD}${TAG}.txt

# Clean up the extra stuff:
if [ "$P1" = "--cleanup" ]; then
  rm -rf $TMP/tmp-$PRGNAM
  rm -rf $PKG
fi
