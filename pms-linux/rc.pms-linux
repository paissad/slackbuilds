#!/bin/bash
#
# Author: Papa Issa DIAKHATE <paissad@gmail.com>
DESC="PS3 Media Server"
NAME=pms-linux
CONF_FILE=/etc/PMS.conf
DODTIME=10    # Time to wait for the server to die, in seconds
# If this value is set too low you might not let the program to die gracefully
# and 'restart' will not work

# Colors
txtred=$'\e[0;31m' # Red
txtylw=$'\e[0;33m' # Yellow
txtrst=$'\e[0m'    # Text Reset
#--------------------------------------------------------------------------
warnout(){
    echo -e ""$txtylw"Warning:$txtrst $1"
}
#--------------------------------------------------------------------------
running(){
    pid=`pgrep -f 'java .*/usr/share/pms-linux/pms.jar.*'`
}
#--------------------------------------------------------------------------
do_start(){
    running && { warnout "$NAME is already running !"; exit 0; }
    echo "Starting $DESC : $NAME"
    /usr/bin/pms-linux console -c "$CONF_FILE" > /dev/null 2>&1 &
}
#--------------------------------------------------------------------------
do_stop(){
    running || { warnout "$NAME is NOT running !"; exit 0; }    
    local countdown="$DODTIME"
    echo -e "Stopping $DESC : $NAME \c "
    kill -s SIGTERM $pid 
    while running; do
        if (($countdown >= 0)); then
            sleep 1; echo -n .;
            ((--countdown))
        else
            break;
        fi
    done
    echo
    # If still running, then try to send SIGINT signal
    running && { \
        echo >&2 "Using kill -s SIGINT instead"; \
        echo >&2 "If you see this message again, then you should increase the value of DODTIME in '$0'."; \
        kill -2 $pid; \
    }
    return 0
}
#--------------------------------------------------------------------------
do_force-stop(){
    running || { warnout "$NAME is NOT running !"; exit 0; }    
    echo "Stopping $DESC : $NAME"
    kill -9 $pid 
}
#--------------------------------------------------------------------------
do_restart(){
    do_stop; do_start;
}
#--------------------------------------------------------------------------
do_force-restart(){
    do_force-stop; do_start;
}
#--------------------------------------------------------------------------
do_status(){
    echo -n " * $NAME is "
    ( running || { echo "NOT running "; exit 0; } )
    ( running && { echo "running (PID -> $(echo $pid))"; exit 0; } )
}
#--------------------------------------------------------------------------
case "$1" in 

    start|stop|force-stop|restart|force-restart|status)
        do_${1}
        ;;
    *)
        echo "Usage: $SCRIPTNAME {start|stop|force-stop|restart|force-restart|status}"
        exit 1
        ;;
esac

